{"version":3,"sources":["components/funnels-list/funnels-list.jsx","components/funnel-data/funnel-data.jsx","App.js","serviceWorker.js","index.js"],"names":["List","funnels","handleClick","className","onChange","map","funnel","i","key","value","site","FunnelData","activeFunnel","total","domain","is_active","App","props","componentDidMount","fetch","then","response","json","data","setState","event","choice","state","filter","target","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAWeA,G,YARF,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAQC,EAAV,EAAUA,YAAV,OACT,4BAAQC,UAAU,OAAQC,SAAUF,GAC/BD,EAAQI,KAAI,SAACC,EAAOC,GAAR,OACT,4BAAQC,IAAKD,EAAGE,MAAOH,EAAOI,MAAOJ,EAAOI,YCKzCC,G,MARI,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAaC,EAAf,EAAeA,MAAf,OACf,yBAAKV,UAAU,uBACX,sCAAYS,EAAaE,QACzB,sCAAYF,EAAaG,UAAY,OAAS,SAC9C,qCAAWF,MC+BJG,E,YAhCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,kBAAoB,WAChBC,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACvB,QAASsB,EACFX,aAAcW,EAAK,SAZ5C,EAenBrB,YAAc,SAACuB,GACX,IAAIC,EAAS,EAAKC,MAAM1B,QAAQ2B,QAAO,SAAAtB,GAAM,OAAIA,EAAOI,OAASe,EAAMI,OAAOpB,SAC9E,EAAKe,SAAS,CAACZ,aAAcc,EAAO,MAfpC,EAAKC,MAAQ,CACT1B,QAAS,GACTW,aAAc,IAJH,E,sEAqBT,IAAD,EAC0BkB,KAAKH,MAA7B1B,EADF,EACEA,QAAQW,EADV,EACUA,aACf,OACI,yBAAKT,UAAU,OACX,kBAAC,EAAD,CAAMF,QAASA,EAASC,YAAa4B,KAAK5B,cAC1C,kBAAC,EAAD,CAAYU,aAAcA,EAAcC,MAAOZ,EAAQ8B,c,GA3BrDC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.10e5409d.chunk.js","sourcesContent":["import React from \"react\";\nimport './funnels-list.scss';\n\nconst List = ({funnels,handleClick}) => (\n    <select className=\"list\"  onChange={handleClick}>\n        {funnels.map((funnel,i) => (\n            <option key={i} value={funnel.site}>{funnel.site}</option>\n        ))}\n    </select>\n)\n\nexport default List;","import React from \"react\";\nimport './funnel-data.scss';\n\nconst FunnelData = ({activeFunnel,total}) => (\n    <div className='funnel-data-wrapper'>\n        <p>domain: {activeFunnel.domain}</p>\n        <p>active: {activeFunnel.is_active ? 'true' : \"false\"}</p>\n        <p>total: {total}</p>\n    </div>\n)\n\nexport default FunnelData;","import React, {Component} from 'react';\nimport './App.css';\nimport List from './components/funnels-list/funnels-list';\nimport FunnelData from \"./components/funnel-data/funnel-data\";\n\nclass App extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            funnels: [],\n            activeFunnel: []\n        }\n    }\n\n    componentDidMount = () => {\n        fetch('https://bitcoin-blueprint-app.com/funnels')\n            .then(response => response.json())\n            .then(data => this.setState({funnels: data,\n                                                activeFunnel: data[0]}))\n    }\n\n    handleClick = (event) => {\n        let choice = this.state.funnels.filter(funnel => funnel.site === event.target.value);\n        this.setState({activeFunnel: choice[0]})\n\n\n    }\n    render() {\n        const {funnels,activeFunnel} = this.state;\n        return(\n            <div className=\"App\">\n                <List funnels={funnels} handleClick={this.handleClick}/>\n                <FunnelData activeFunnel={activeFunnel} total={funnels.length}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}