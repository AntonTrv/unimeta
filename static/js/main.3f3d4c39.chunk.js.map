{"version":3,"sources":["components/funnels-list/funnels-list.jsx","components/funnel-data/funnel-data.jsx","components/funnel-filter/funnel-filter.jsx","App.js","serviceWorker.js","index.js"],"names":["List","funnels","handleClick","input","className","style","height","overflow","direction","length","map","funnel","i","onClick","key","site","FunnelData","activeFunnel","configs","is_active","href","src","domain","alt","PAGE_TITLE","TEMPLATE_NAME","TRANSLATIONS_TYPE","TRANSLATIONS_MODE","SUPPORTED_LANGUAGES","split","el","Object","entries","CUSTOM_MAP_LANGUAGES","value","Filter","handleChange","onChange","placeholder","type","App","props","componentDidMount","fetch","then","response","json","data","setState","event","choice","state","filter","target","innerText","filtered","includes","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f3d4c39.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport CustomScroll from 'react-customscroll';\nimport './funnels-list.scss';\n\nconst List = ({funnels,handleClick,input}) => (\n\n    <div className='list-wrapper light' style={{height: '90vh', overflow: 'hidden', direction: 'rtl'}}>\n        <CustomScroll>\n        <ul className='list'>\n            {input.length ? input.map((funnel,i) => (\n                    <li onClick={handleClick} className=\"funnel-li\" key={i} >{funnel.site}</li>\n                )) :\n                funnels.map((funnel,i) => (\n                <li onClick={handleClick} className=\"funnel-li\" key={i} >{funnel.site}</li>\n            ))\n\n            }\n        </ul>\n        </CustomScroll>\n    </div>\n\n)\n\nList.propTypes = {\n    funnels: PropTypes.array,\n    handleClick: PropTypes.func,\n    input: PropTypes.array\n}\n\nexport default List;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport './funnel-data.scss';\n\nconst FunnelData = ({activeFunnel,configs}) => (\n    <div className='funnel-data-wrapper'>\n        <div className=\"bar\">{activeFunnel.is_active ? <div className=\"status-wrapper\"><span className='status'>Active </span><div className='dot green'></div> </div> : <div className=\"status-wrapper\"><span className='status'><a href='https://youtu.be/3fHLQmwZiSk?t=14'>Ooops</a>  </span><div className='dot red'></div></div> }</div>\n        <div className='screenshot-wrapper meta'>\n            <img src={activeFunnel ? `http://${activeFunnel.domain}/assets/img/screenshot.png` : \"https://cdn-st1.rtr-vesti.ru/p/xw_1004150.jpg\"} alt='&nbsp; Ooops https://www.youtube.com/watch?v=dQw4w9WgXcQ'/>\n        </div>\n\n        <div className=\"meta-wrapper\">\n        <div className=\"funnel-meta light meta\">\n            <p className=\"tag\"><b>domain:</b> {activeFunnel.domain}</p>\n        <p className=\"tag\"><b>active:</b> {activeFunnel.is_active ? 'true' : \"false\"}</p>\n\n        </div>\n        <div className='configs light meta'>\n            <div className='tag'>Title: {configs.PAGE_TITLE}</div>\n            <div className='tag'>Template name: {configs.TEMPLATE_NAME}</div>\n            <div className='tag'>Translation type: {configs.TRANSLATIONS_TYPE}</div>\n            <div className='tag'>Templation mode: {configs.TRANSLATIONS_MODE}</div>\n            <div className='tag'>Supported languages: <ul className='custom_map'>{configs.SUPPORTED_LANGUAGES.split(',').map((el,i) => <li key={i} className=\"custom_language\">{el}</li>)}</ul></div>\n            <div className='tag'>Custom map languages: <ul className='custom_map'> {Object.entries(configs.CUSTOM_MAP_LANGUAGES).map(([key,value]) => (<li key={key} className='custom_language'>{key}:{value}|</li>))}</ul></div>\n        </div>\n    </div>\n\n    </div>\n)\n\nFunnelData.propTypes = {\n    activeFunnel: PropTypes.object,\n    total: PropTypes.number,\n    configs: PropTypes.object\n}\nexport default FunnelData;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './funnel-filter.scss';\n\nconst Filter = ({handleChange}) => (\n    <div className='filter-wrapper'>\n        <input onChange={handleChange} placeholder=\"Enter funnel name\" type=\"text\"/>\n    </div>\n)\n\nFilter.propTypes = {\n    handleChange: PropTypes.func\n}\n\nexport default  Filter;","import React, {Component} from 'react';\nimport './App.css';\nimport List from './components/funnels-list/funnels-list';\nimport FunnelData from \"./components/funnel-data/funnel-data\";\nimport Filter from \"./components/funnel-filter/funnel-filter\";\n\n\nclass App extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            funnels: [],\n            activeFunnel: {},\n            input: [],\n            configs: {\"PAGE_TITLE\": \"btc-traderapp.com\",\n                \"TEMPLATE_NAME\": \"btc-traderapp.com\",\n                \"TRANSLATIONS_TYPE\": \"JSON\",\n                \"TRANSLATIONS_MODE\": \"COUNTRY\",\n                \"SUPPORTED_LANGUAGES\": \"DA,DE-AT,DE-CH,DE,EN,ES,ET,FI,FO,FR,IT,LT,LV,NL,NO,PL,PT,RU,SK,SL,SV\",\n                \"CUSTOM_MAP_LANGUAGES\": {\n                    \"MD\": \"RU\",\n                    \"UA\": \"RU\",\n                    \"GE\": \"RU\",\n                    \"AT\": \"DE\",\n                    \"CL\": \"ES\",\n                    \"AR\": \"ES\",\n                    \"BR\": \"PT\",\n                    \"CO\": \"ES\",\n                    \"CR\": \"ES\",\n                    \"DO\": \"ES\",\n                    \"EC\": \"ES\",\n                    \"SV\": \"ES\",\n                    \"MX\": \"ES\",\n                    \"PA\": \"ES\",\n                    \"PE\": \"ES\",\n                    \"PR\": \"ES\",\n                    \"VE\": \"ES\",\n                    \"DK\": \"DA\",\n                    \"CH\": \"DE\",\n                    \"SE\": \"SV\",\n                    \"BE\": \"FR\"\n                },\n                \"CUSTOMER_ID\": [3]}\n        }\n    }\n\n    componentDidMount = () => {\n        fetch('https://bitcoin-blueprint-app.com/funnels')\n            .then(response => response.json())\n            .then(data => this.setState({funnels: data,\n                                                activeFunnel: data[0]}))\n    }\n\n    handleClick = (event) => {\n        let choice = this.state.funnels.filter(funnel => funnel.site === event.target.innerText);\n        this.setState({activeFunnel: choice[0]})\n    }\n\n    handleChange = (event) => {\n        let filtered = this.state.funnels.filter(funnel => funnel.site.includes(event.target.value));\n        this.setState({input: filtered})\n    }\n    render() {\n        const {funnels,activeFunnel,input,configs} = this.state;\n        return(\n            <div className=\"App\">\n                <div className='total total_mob'><b>Total:</b> {input.length ? input.length :funnels.length}</div>\n                <div className=\"search-field\">\n                <Filter handleChange={this.handleChange}/>\n                <List funnels={funnels}  input={input} handleClick={this.handleClick}/>\n                    <div className='total'><b>Total:</b> {input.length ? input.length :funnels.length}</div>\n                </div>\n                <FunnelData activeFunnel={activeFunnel} configs={configs}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}